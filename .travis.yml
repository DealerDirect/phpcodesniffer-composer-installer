---
language: php

cache:
  directories:
    - "${HOME}/.composer/cache"

env:
  global:
    - PATH="${HOME}/bin:${PATH}"

jobs:
  include:
    - stage: test
      php: 8.0
      env: PHPCS_VERSION="dev-master" LINT=1
    - php: 8.0
      # Lowest PHPCS version on which PHP 8.0 is supported.
      env: PHPCS_VERSION="3.5.7"
    - php: 7.4
      env: PHPCS_VERSION="dev-master" LINT=1
    - php: 7.4
      # Lowest PHPCS version on which PHP 7.4 is supported.
      env: PHPCS_VERSION="3.5.0"
    - php: 7.3
      env: SECURITY=1 PHPCS_VERSION="3.5.3" LINT=1
    - php: 7.3
      # Lowest PHPCS version on which PHP 7.3 is supported.
      env: PHPCS_VERSION="3.3.1"
    - php: 7.2
      env: PHPCS_VERSION="3.2.3" LINT=1
    - php: 7.2
      # Lowest PHPCS version on which PHP 7.2 is supported.
      env: PHPCS_VERSION="2.9.2"
    - php: 7.1
      env: PHPCS_VERSION="3.1.1" LINT=1
    - php: 7.1
      env: PHPCS_VERSION="2.0.0"
    - php: 7.0
      env: PHPCS_VERSION="3.4.2" LINT=1
    - php: 7.0
      env: PHPCS_VERSION="2.2.0"
    - php: 5.6
      env: PHPCS_VERSION="3.0.2" LINT=1
    - php: 5.6
      env: PHPCS_VERSION="2.4.0"
    - php: 5.5
      # As the latest Debian does not support PHP 5.5 anymore, we need to force using 'trusty'.
      dist: trusty
      env: PHPCS_VERSION="dev-master" LINT=1
    - php: 5.5
      # As the latest Debian does not support PHP 5.5 anymore, we need to force using 'trusty'.
      dist: trusty
      env: PHPCS_VERSION="2.6.1"
    - php: 5.4
      # As the latest Debian does not support PHP 5.4 anymore, we need to force using 'trusty'.
      dist: trusty
      env: PHPCS_VERSION="3.5.3" LINT=1
    - php: 5.4
      # As the latest Debian does not support PHP 5.4 anymore, we need to force using 'trusty'.
      dist: trusty
      env: PHPCS_VERSION="2.8.1"
    - php: 5.3
      # As the latest Debian does not support PHP 5.3 anymore, we need to force using 'precise'.
      dist: precise
      env: PHPCS_VERSION="2.9.2"
    - php: 5.3
      # As the latest Debian does not support PHP 5.3 anymore, we need to force using 'precise'.
      dist: precise
      env: PHPCS_VERSION="2.0.0"

    - php: 7.4
      env: PHPCS_VERSION="4.0.x-dev as 3.9.99"

    - php: nightly
      env: PHPCS_VERSION="dev-master" LINT=1

  allow_failures:
    # Allow failures for unstable builds.
    - php: "nightly"
    - env: PHPCS_VERSION="4.0.x-dev as 3.9.99"

  fast_finish: true

before_install:
  # Speed up build time by disabling Xdebug.
  phpenv config-rm xdebug.ini || echo 'No xdebug config.'

install:
  - composer require --no-update --no-suggest --no-scripts squizlabs/php_codesniffer:"${PHPCS_VERSION}"
  - |
    if [[ ${PHPCS_VERSION:0:3} < "2.2" ]]; then
      # Install PHPCompatibility 7.x for PHPCS < 2.2.
      composer require --no-update --no-suggest --no-scripts phpcompatibility/php-compatibility:"^7.0"
    elif [[ ${PHPCS_VERSION:0:3} < "2.3" ]]; then
      # Install PHPCompatibility 8.x for PHPCS 2.2 < 2.3.
      composer require --no-update --no-suggest --no-scripts phpcompatibility/php-compatibility:"^8.0"
    fi
  - |
    if [[ $TRAVIS_PHP_VERSION != "nightly" && $TRAVIS_PHP_VERSION != "8.0" ]]; then
      travis_wait composer install \
        --no-interaction \
        --no-progress \
        --no-scripts \
        --no-suggest \
        --optimize-autoloader \
        --prefer-dist --verbose
    else
      composer require --no-update --no-suggest --no-scripts phpcompatibility/php-compatibility
      travis_wait composer install \
        --ignore-platform-reqs \
        --no-dev \
        --no-interaction \
        --no-progress \
        --no-scripts \
        --no-suggest \
        --optimize-autoloader \
        --prefer-dist \
        --verbose
    fi
  - >
    if [[ ${PHPCS_VERSION:0:3} < "2.2" ]]; then
      # Rename the PHPCompatibility directory as PHPCompatibility 7.x wasn't fully compatible with Composer yet.
      mv ./vendor/phpcompatibility/php-compatibility ./vendor/phpcompatibility/PHPCompatibility
    fi

script:
  - |
    if [[ "$LINT" == "1" ]]; then
      if find . -path ./vendor -prune -o -name "*.php" -exec php -l {} \; | grep "^[Parse error|Fatal error]"; then
        exit 1
      fi
    fi
  - composer install-codestandards
  - ./vendor/bin/phpcs -i
  - |
    if [[ ${PHPCS_VERSION:0:3} < "2.3" ]]; then
      # Test that an external standard has been registered correctly by running it against the codebase on PHPCS < 2.3.
      ./vendor/bin/phpcs -ps ./src/ \
        --runtime-set testVersion "${TRAVIS_PHP_VERSION:0:3}" \
        --sniffs=PHPCompatibility.PHP.DeprecatedFunctions \
        --standard=PHPCompatibility
    else
      # Test that an external standard has been registered correctly by running it against the codebase.
      ./vendor/bin/phpcs -ps ./src/ \
        --runtime-set testVersion "${TRAVIS_PHP_VERSION:0:3}" \
        --sniffs=PHPCompatibility.FunctionUse.RemovedFunctions \
        --standard=PHPCompatibility
    fi
  - |
    if [[ "$SECURITY" == "1" ]]; then
      ./vendor/bin/security-checker -n security:check
    fi
